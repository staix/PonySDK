apply plugin: 'java'

sourceCompatibility = 1.6
version = '1.4.0.1'

ext{
    coreversion = 0.6
    srcCore = "src-core/main/java"
    srcTerminal = "src-core/main/java/com/ponysdk/ui/terminal"
    srcDefaultimpl = "src-defaultimpl/main/java"
    srcGenerator = "src-generator/main/java"
    srcGenerated = "src-generated/main/java"
    srcJetty = "src-jetty/main/java"
    srcSpring = "src-spring/main/java"
    srcPersistency = "src-persistency/main/java"
    srcHibernate = "src-hibernate/main/java"
    srcMongoDB = "src-mongodb/main/java"
    srcJasper = "src-jasper/main/java"
    gwtOutputDirName = buildDir.name + "/gwt"
    buildInfoOutputDirName = buildDir.name + "/buildinfo"
    warResources = "src-core/main/resources/war"
    specResources = "src-core/main/resources/spec"
    confResources = "src-spring/main/resources/conf"
    javadocResources = "src-core/main/javadoc"
}


sourceSets {
	main {
		java {
			srcDir srcCore
			srcDir srcDefaultimpl
			srcDir srcGenerator
			srcDir srcGenerated
			srcDir srcJetty
			srcDir srcSpring
			srcDir srcPersistency
			srcDir srcHibernate
			srcDir srcMongoDB
			srcDir srcJasper
		}
	}
}

repositories {
	mavenCentral()
    maven {
        url "https://github.com/PonySDK/Maven/raw/master/ext"
    }
}

configurations {
	xjc
	gwt
	spring
	sl4j
	log4j
	commons
	hibernate
	jasper
	mongodb
	selenium
	json_jackson
    jetty
	
	compile {
		extendsFrom gwt, spring, sl4j, hibernate, jasper, mongodb, json_jackson, jetty, log4j
	}

	testCompile {
		extendsFrom selenium
	}
	
	runtime {
		extendsFrom spring, sl4j, hibernate, mongodb, json_jackson
	}
    
}

dependencies {
	xjc 'com.sun.xml.bind:jaxb-xjc:2.2.4'
	gwt 'com.google.gwt:gwt-user:2.5.0'
	gwt 'com.google.gwt:gwt-dev:2.5.0'
	gwt 'com.google.gwt:gwt-codeserver:2.5.0'
	gwt 'javax.validation:validation-api:1.0.0.GA@jar'
	gwt 'org.json:json:20090211'
	spring 'org.springframework:spring-context:3.0.6.RELEASE'
	spring 'org.springframework:spring-web:3.0.6.RELEASE'
	sl4j 'org.slf4j:slf4j-api:1.6.2'
	sl4j 'org.slf4j:log4j-over-slf4j:1.6.4'
	sl4j 'ch.qos.logback:logback-classic:1.0.0'
	sl4j 'org.slf4j:jcl-over-slf4j:1.6.4'
	log4j 'log4j:log4j:1.2.16'
	log4j 'commons-io:commons-io:20030203.000550'
	commons 'commons-beanutils:commons-beanutils:1.8.3'
	hibernate 'org.hibernate:hibernate-core:3.6.7.Final'
	jasper 'ar.com.fdvs:DynamicJasper:3.0.13'
	mongodb 'org.mongodb:mongo-java-driver:2.7.3'
	selenium 'org.seleniumhq.selenium:selenium-java:2.25.0'
	selenium 'junit:junit:4.10'
	json_jackson 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    jetty 'org.eclipse.jetty:jetty-server:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-servlet:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-webapp:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-servlets:8.1.4.v20120524'
    jetty 'org.eclipse.jetty:jetty-websocket:8.1.4.v20120524'
    jetty 'org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0'
}


jar {
	baseName = 'ponysdk'
    from sourceSets.main.output
    from gwtOutputDirName
    from warResources
    
    metaInf {
        from 'src-core/main/resources/META-INF'
        from buildInfoOutputDirName
    }

    into('conf') {
        from confResources
    }
    
    manifest {
		def cmd = "git rev-parse HEAD"
	    def proc = cmd.execute()
	    ext.revision = proc.text.trim()
	    ext.timestamp = (int)(new Date().getTime()/1000)
	    
		attributes("Manifest-Version": "1.0")
		attributes("Created-By": "PonySDK")
		attributes("Built-By": "PonySDK")
		attributes("License-Title": "Apache License 2.0")
		attributes("Specification-Title": "PonySDK")
	    attributes("Specification-Version": version)
	    attributes("Specification-Vendor": "PonySDK")
	    attributes("Implementation-Title": "PonySDK")
	    attributes("Implementation-Version": version)
	    attributes("Implementation-Vendor-Id": "com.ponysdk")
		attributes("Implementation-Vendor": "PonySDK")
	    attributes("Implementation-Core-Version": coreversion)
	    attributes("Revision": revision)
	    attributes("Date": timestamp + " / " + new Date().toGMTString())
	}
}


javadoc {
	failOnError false
}


task cleanGenerated(type: Delete) {
	delete srcGenerated
}

task generateDatamodel {
	description = 'Model generation'
	inputs.file file('src-core/main/resources/spec/project_schema.xsd')
	outputs.dir file('src-generated/main/java/com/ponysdk/generator')
	doLast {
		file(srcGenerated).mkdirs();
		ant {
			taskdef(name: 'xjc',
			classname: 'com.sun.tools.xjc.XJCTask',
			classpath: configurations.xjc.asPath)
			xjc(destdir:srcGenerated, package:'com.ponysdk.generator') {
				schema(dir:'src-core/main/resources/spec', includes: 'project_schema.xsd')
			}
		}
	}
}

task compileDatamodel(type: JavaCompile, dependsOn: generateDatamodel) {
	classpath = configurations.xjc
	source = file(srcGenerated)
	destinationDir = file("$buildDir/classes/main")
	inputs.file file('src-generated/main/java/com/ponysdk/generator')
	outputs.dir file("$buildDir/classes/main/com/ponysdk/generator")
}

task compileGenerator(type: JavaCompile, dependsOn: compileDatamodel) {
	classpath = files("$buildDir/classes/main") + configurations.gwt + configurations.sl4j
	source = srcGenerator
	destinationDir = file("$buildDir/classes/main")
	inputs.file file(srcGenerator)
	outputs.dir file("$buildDir/classes/main/com/ponysdk/generator")
}

task generateDictionnary(type: JavaExec, dependsOn: compileGenerator) {
	description = 'Dictionnary generation'
	main = 'com.ponysdk.generator.PropertiesDictionnaryGenerator'
	classpath { 
		[
			file("$buildDir/classes/main"),
			configurations.sl4j,
			configurations.gwt
		]
	}
	args = [
		'verbose=false'
	]
	inputs.file file('src-core/main/resources/spec/propertiesDictionnary.json')
	outputs.dir file('src-generated/main/java/com/ponysdk/ui')
}


task generate(dependsOn: generateDictionnary) {
	doLast {
		println 'generation done'
	}
}


task compileTerminal << {
	def result = System.getProperty('nogwtc', 'false')
	println('nogwtc ? ' + result)
	if(result == 'true') {
		println('[WARN] terminal compilation disabled');
	} else {
		tasks.gwtc.execute();
	}
}

task gwtc(type: JavaExec) {
	description = 'GWT compile'
	main = 'com.google.gwt.dev.Compiler'
	maxHeapSize = '512M'
	workingDir = buildDir
	inputs.dir file(srcTerminal)
	classpath {
		[
			sourceSets.main.java.srcDirs,
			sourceSets.main.output,
			configurations.gwt
		]
	}
	args = [
		'-XenableClosureCompiler',
		'-war',
		'gwt',
		'-localWorkers',
		Runtime.getRuntime().availableProcessors(),
		'com.ponysdk.ui.PonyTerminal'
	]
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    baseName = 'ponysdk-src'
	from sourceSets.main.allJava
	from(srcCore) {
		include '**/*.xml'
	}
	from(srcGenerated) {
		include '**/*.xml'
	}
	from(specResources) {
		into 'spec'
	}
	
    manifest {
		def cmd = "git rev-parse HEAD"
	    def proc = cmd.execute()
	    ext.revision = proc.text.trim()
	    ext.timestamp = (int)(new Date().getTime()/1000)
	    
		attributes("Manifest-Version": "1.0")
		attributes("Created-By": "PonySDK")
		attributes("Built-By": "PonySDK")
		attributes("License-Title": "Apache License 2.0")
		attributes("Specification-Title": "PonySDK")
	    attributes("Specification-Version": version)
	    attributes("Specification-Vendor": "PonySDK")
	    attributes("Implementation-Title": "PonySDK")
	    attributes("Implementation-Version": version)
	    attributes("Implementation-Vendor-Id": "com.ponysdk")
		attributes("Implementation-Vendor": "PonySDK")
	    attributes("Implementation-Core-Version": coreversion)
	    attributes("Revision": revision)
	    attributes("Classifier": "sources")
	    attributes("Date": timestamp + " / " + new Date().toGMTString())
	}
}

task javadocJar(type: Jar, dependsOn:javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
     /**
     title = 'PonySDK javadoc'
    excludes = ['com.ponysdk.ui.terminal']
    doLast {
        copy {
            from javadocResources
            into buildDir.name + '/docs/javadoc';
        }
    }
     **/
    
	manifest {
		def cmd = "git rev-parse HEAD"
	    def proc = cmd.execute()
	    ext.revision = proc.text.trim()
	    ext.timestamp = (int)(new Date().getTime()/1000)
	    
		attributes("Manifest-Version": "1.0")
		attributes("Created-By": "PonySDK")
		attributes("Built-By": "PonySDK")
		attributes("License-Title": "Apache License 2.0")
		attributes("Specification-Title": "PonySDK")
	    attributes("Specification-Version": version)
	    attributes("Specification-Vendor": "PonySDK")
	    attributes("Implementation-Title": "PonySDK")
	    attributes("Implementation-Version": version)
	    attributes("Implementation-Vendor-Id": "com.ponysdk")
		attributes("Implementation-Vendor": "PonySDK")
	    attributes("Implementation-Core-Version": coreversion)
	    attributes("Revision": revision)
	    attributes("Classifier": "javadocs")
	    attributes("Date": timestamp + " / " + new Date().toGMTString())
	}
}
 
// add javadoc/source jar tasks as artifacts
artifacts {
     archives sourcesJar
     archives javadocJar
}


def copyLib(configurations, dest) { 
	println 'copying libs to #' + dest
	copy {
		from configurations
		into dest
		rename '(.*)-(.*).jar', '$1.jar'
	}
}

task copyAllLibs << {
	copyLib(configurations.gwt, 'libs/gwt');
	copyLib(configurations.spring, 'libs/spring');
	copyLib(configurations.sl4j, 'libs/logging');
	copyLib(configurations.log4j, 'libs/logging');
	copyLib(configurations.hibernate, 'libs/hibernate');
	copyLib(configurations.jasper, 'libs/jasper');
	copyLib(configurations.mongodb, 'libs/mongodb');
	copyLib(configurations.selenium, 'libs/tests');
	copyLib(configurations.json_jackson, 'libs/json_jackson');
	copyLib(configurations.jetty, 'libs/jetty');
	copyLib(configurations.commons, 'libs/commons');
}

task sendTo(type: Copy) {
	def outputdir = System.getProperty("jar.destination", ".");
	println('copying jars to: ' + outputdir)
	
	from file("$buildDir/libs")
	into file(outputdir)
}

clean.dependsOn(cleanGenerated)
compileJava.dependsOn(generate)
jar.dependsOn(compileTerminal)
assemble.dependsOn(copyAllLibs)
